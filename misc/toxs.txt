一、现在要做的（1~3个月）
目前做最坏的打算，你只需要作如下准备：
1，查看网站了解各公司招聘需求，知道有哪些公司，以及哪些些领域，做什么工作。（弄清楚你是做什么的？）
先弄清楚计算机行业是什么这一点非常关键，弄清楚这一点才能给自己定位，除非以后你不想干大学学的这个专业，否则这一点不清楚的话，以后工作完全没有目标，只是低头蛮干，不知道思考方向，干多少年也只是局限在一个层次上。

2，结合自己的能力和前面的信息，明确自己的大致目标方向（弄清楚你能做什么？）。
在了解的同时记录，整理，以及顺便做好自己的简历。其他的内容为辅。以后会详细整理。

其实除了如上两点，还有一个是在将来自己工作一段时间在确定的（一般在5-8）年之内明确的东西，就是将来自己要做什么。不过现在先不用想那么远，先明确行业状况，以及大致的方向就行。
这两个是方向的东西，具体的技术和知识在你工作之后会慢慢学到的。学校那些东西其实也只是帮助你大致知道 有哪些领域的知识，具体的细节只要知道一点就行，工作的时候用到了你会不由自主的深入学习的。在学校学习好，也许以后工作之后会上手快一点，但是也就只比学习不好的早几个月而已。一年以后就没有区别了。

推荐网站：按照以前我投送成功率，上面的信息，以及收到的反馈排：
51job（推荐用这个，其他的作为辅助）
智联招聘
人才热线
猎聘网（有一定经验至少4年才能使用）

二、求职需要准备的（1~4个月）
1.简历投递
有几点注意：不要重复投递简历。
包括：个人信息少量、能力信息、教育和工作经验信息。

注意：
不要盲目投递，一方面暴露自己的资料，另外也不一定找到自己想要的。
不要重复往一个公司投，这样会让人力资源处理的时候恼火。
先上51job上多看看，论坛或者之类的其他人的经验。

2.面试相关
需要准备一些面试的资料。
（1）常见问题
以下是我面试时，遇到过的一些问题。
介绍自己经历？
有什么优缺点？
职业规划怎样？
介绍最有成就的事情？
为什么离职？
期望薪资？
对公司有什么了解？
之前面试过吗？
为什么来这里工作？
对我们公司还有什么看法吗？

（2）参考思路
这些是面试时应付面试的时候准备的一些资料和回答思路。
参考一下，具体可以自己根据情况。
*自我介绍？
尽量准备一些，不要太长，包括英文的。
包括：个人信息少量、能力信息、教育和工作经验信息。
其实就是将简历的内容按照记忆来回忆一遍说出来。

*离职原因？
例如：所做内容随时间发现不太匹配。变动太频繁。(这样的回答太不好)
建议：尽量与公司关系不大的，如家人生病，或需要长期请假，或者家人在外地。
如果与公司关系大的，如：对员工发展不太关注，诚信（如拖欠工资等），归属感等，尽量少用。
公司有些地方对员工关注不够，如：户籍、以及承诺的薪资和试用期（3-6，第七个月才正式），福利催才交；家人身体比较差，所以请假有不能太久，直接辞职。

*职业规划？
可参考我之前回答他们的思路，如下
首先，
明确可以选择的方向。比如，硬件方面、系统方面、应用方面、网络方面、多媒体方面、等等。根据自己对本行业的理解，给出几个备选的内容。

其次，
确定自己目标（结合技术能力和兴趣），比如：
（a）Linux上的C/C++应用编程、脚本（shell、python、makefile）编写、以及嵌入式Linux文件系统定制和交叉编译环境的搭建。
（b）Linux上内核驱动开发、网络编程（socket、wifi、3g、ipv6等）
（c）音视频多媒体相关的工作
以上的内容，大致是我比较关心的领域，也是按照我的熟悉程度列出的，其中对（1）的相关内容，经验最多，可以直接接手要求较为专的内容；对（2）我也有一些专业经验，但是还没有达到和（1）那样的程度所以从事的内容如果比较专业则可能会花费一些时间；对于（3）我目前只是大致了解，还没有过多从事过相关的内容。

再次，
分步实现以上目标，（把时间点说清楚，即几年内实现什么，几年内实现什么等）

再次，
在实践中明确，结合所处的工作职位，结合实际多思考和改善以上目标。

另外，
目前的状况：对于驱动开发多媒体懂一些但是不够深入，可以涉及一些，需要对此学习和深入，以上方向，可以有一两个同时，但是不要变化太快。目前擅长的是Linux系统开发和使用。C++/C/脚本。

*薪水
尽量不漏底牌，直至最后，不要具体数字，如果实在需要回答，给出范围即可。
不低于目前，越多越好

*最后一问（最后对我们公司有什么建议和问题？）
不要问薪水，不要问过于高深的，不要问超出应聘职位的，最好问一些关注公司的或当前职位的情况和需要强化的技能。如果有勇气，询问答复时间。

*自己暗自关注的
这些问题，不要上来就直接问，拿到offer后或者最后面试时，可以问，最好要公司有书面保证。
薪金待遇
薪资水平
试用期多久？薪水怎么算？
记薪日？薪资构成？
正常十几薪，是否含奖金？奖金和年终奖是否一样？年终奖要多久才有？是否包含试用期？
加班是否有调休？加班费？
社保
医疗（综合、住院、基本）、生育保险、公积金、养老保险
户籍是否处理？多久？
年假和加班
年假？调休？

注意明确对他们承诺的待遇的书面承诺。


三、补充一点直观的知识
关于上面这两点，除了你从网上看到的以及自己分析的，我给你说一下我所知道的东西，这个理解表达出来可能比较片面狭窄，你将来在这个基础上自己扩展吧。还有你要注意，下面我说的东西，不是百分之百准确，要靠你的理解，可能有些内容你自己想想就理解了，可能有些内容你怎么看也看不明白，还可能有些东西你觉得不对。不用纠结这些，看不明白以后再看，下面的内容就是当一个故事来看吧。其实以后若有机会，这些东西，更好的理解方式就是交流，你可以问我，一问一答，比让你一下子看一大堆文字理解的更快一些。而最好的方式，是自己的实践。
看完之后，想想这几个问题。
1、计算机行业是做什么的？
2、什么是软件？
3、什么是产品？
4、如果把东西归结为学校的知识，学什么？

从纯技术上讲，我们主要关注的东西可以从下到上分为三层：
硬件层、系统层、应用层。如果严格按照顺序来讲，格式好看，理解不易。所以我交替着讲这三个层次。

*硬件层：
你可以理解为纯粹的物理硬件，比如看到的主机主板、电路板、手机拆开之后看到的主板，硬盘，等这些看得见的东西。计算机领域有一部分人是做这个的，他们是硬件工程师。比如如何焊接集成电路，如何构造门电路等等。做他们这行，涉及的知识在学校中用到的比如：计算机组成原理、数字逻辑电路、电工电子之类的一些学科。大部分知识还是在工作中发现，以及学校之外的网上或者什么地方找到的相关电子书籍。

*系统层
你可以理解为系统的稳定性，可靠性，不会经常出现死机、慢等现象，并且方便使用，不需要一大堆手工操作就能自动、批量、定时的做一些事情（比如定时清理磁盘、定时重启备份等），以及工作环境的稳定等。有一些维护系统的人，叫系统工程师，专门负责维护系统，机器系统乱了、网站挂了、机器中毒了等等。他们负责的事情方方面面，可是就是不直接拿着扳子，钳子、电焊锤子等等，活很少这样的工具干活；他们只在键盘前面噼里啪啦一顿乱敲，这里接线，那里配置，以及安装下载一些东西等；他们也不负责告诉你哪个应用程序怎么用，甚至根本不知道你机器上有什么程序。他们所处的层次，就是系统层，没有他们，别人就不能干活。例如，就算你是程序员，网络工程师，你机器死机了，不能上网了，没人管这个事情，你也无法干活；如果只给你一个机器，什么都没有，只有一个操作系统，让你开发程序，你也不知道从何做起，除非你什么都知道，知道从哪里下载什么，安装什么，配置什么等等等等，把整个系统配置好，然后有了一套可以干活的机器环境，开始编程。系统工程师工作的层面，大致就是系统层。

*应用层
你可以理解为应用程序。从学校出来，一般就只认得一些东西：JAVA、C语言、C++语言、MFC库、JSP网页开发等等等，好像程序员就是全部，其实这只是对只接触过应用层的人而言。看过前面的硬件层和系统层，便可知，其实程序员，也只是计算机行业中的一小部分而已。应用层就是应用程序所处的层次，在这个层次工作的就是程序员，说的好听点就是软件工程师（软件其实不仅仅是应用层的东西，后面会说到），需要的是C语言、JAVA等高级程序设计语言，需要多学习一些库（例如MFC)等，作为编程的语言开发包、还要使用一些工具例如：vim、记事本、eclipse等进行编辑写代码，使用svn、git等对代码进行版本控制，使用gerrit、repo、等对代码所在的整个项目进行管理便于多人协作开发，以及一些测试工具方法，调试工具等等。最后的结果在外行看来很简单，就是某个应用程序，或者网站等。如：QQ、QQ空间、UC浏览器。这些用户直接使用到的程序，就是应用层的工作。
当然这不是严格来说的，因为系统层也可能会用到一些C语言写的代码，也可能会用一些版本控制工具来管理文档、项目、以及代码等。

*硬件层：
硬件层的功能就是提供基本的功能，比如闪光、发声、机械运动、放电、闪烁等等。所有的应用程序其功能归根到底都是硬件层最终实现的。
比如：手机上的手电筒应用程序，假设它有一个用彩色的方式显示灯光的功能，其实它最终使用的就是硬件闪光灯，可能你的手机中有好多的闪光灯，手电筒中不同的颜色最终就是这些相应颜色的硬件闪光灯提供的。通过手电筒应用程序，你可以选择让红灯亮，绿灯亮，或者不同的灯组合起来行程彩色文字等等。如果你没有红色的闪光灯，就算你的手电筒应用有“红色”的按钮，在应用程序上按下去之后，你也无法看见红光。再例如喇叭，无论你播放的歌曲音乐多么好听，它们都是通过控制喇叭的振幅等参数通过喇叭播放出来的。
只有硬件的话，你是无法厉害到能够精确控制硬件达到特殊的功能效果的，比如你无法人工控制喇叭的振动，或者闪光灯的闪烁，达到特殊的音乐或者图案。这些是由后面的系统层+应用层来控制的。

*系统层：
狭义上来看，你可以理解这一层为操作系统。比如Linux、Windows、Android、IOS等。但是它并不仅仅是操作系统可以完全代替的。这里就暂时用操作系统，来描述系统层的功能。它处于硬件层和应用层之间。操作系统是什么？它其实就是一个特殊的软件，属于系统软件这个类型，它和后面要说的应用程序一样其实都是程序，不过操作系统的功能一般不像应用程序那样，是让用户用的（比如聊天应用、打字应用、等等），操作系统是让应用程序用的。只有先有了操作系统这个环境，应用程序才能在其中大展风采。另外，我们也要明白，操作系统不光光是给应用程序用的，它也是直接和硬件打交道的软件。应用程序通过操作系统和硬件打交道，硬件通过操作系统向应用程序提供服务。也就是说，应用程序通过操作系统传达指令，操作系统直接控制和操作硬件，硬件反馈信息到操作系统，操作系统再回复给应用程序。我们使用C语言、java语言等写好的应用程序，最终需要编译成一个人类看不懂的二进制文件，里面全是乱码，可是一旦运行其这些应用程序，操作系统就可以把它们的一些行为翻译成低级的机器语言，进而操作到实际的硬件。

*应用层：
一切应用程序都是运行在某个操作系统中的，一切的应用程序都是属于某个操作系统的程序，如果有的应用程序可以运行在多个操作系统上，其实那也不过是该程序的不同版本，比如：linux版本的QQ，Windows版本的QQ，Android版本的QQ，Symbian版本的QQ等等等。其实应用程序不过是对一个功能进行直观描述，展现在我们的面前，让我们可以用比较直观的方式来使用该功能。例如，手电筒应用程序，它其实就是描述了手机的灯的控制这个功能。我们可以用其他的方式来描述，例如照相机的闪光灯，也控制手机的灯。不过不同的控制方式，用在不同的用途上，构成了不同的功能。而这些基本功能的组和，可以形成复杂的功能和效果，而应用程序，就是对这些千奇百怪功能的描述，转化而成的我们可以直观看到的东西。
假设你想到了一个有趣的功能（例如，让红光绿光交替闪烁，增加效果），然后用高级程序设计语言编程，最后形成了一个程序，这就是一个新的应用程序诞生了。后来你又想到一个功能，就是绿光亮，声音响，红光亮，声音停，然后又写了一个程序来判断当前是绿光还是红光，进而控制声音，这样就又多了一个程序。然后你把这两个程序同时运行在操作系统上，就会出现红绿闪烁，并且声音时而有时而无的情况。

*操作系统
在书本上我们经常可以看到操作系统有如下功能：cpu管理、内存管理、文件管理、设备管理、网络管理等等。这几点就概括了操作系统的功能：在计算机系统中的操作系统，控制和管理硬件资源被合理的占用（即如果操作系统上运行多个应用程序，那么为了不至于一个应用程序运行时，用户感觉其他应用程序就死在那不动了，操作系统会让这些应用程序轮流运行一会再停下来，这样用户就感觉所有的程序都在运行；如果用户存了一个非常大的文件可是磁盘满了，那么系统会告知不能继续保存抑或删除文件时，发现其实该文件已经不存在等等），这些功能都是操作系统来控制，应用程序来使用，进而用户来享受的。操作系统通过系统调用，让应用程序使用这些功能（可以这样理解，系统调用就是一些操作，比如read、write等）。
也就是说，系统调用就是操作系统为应用程序提供各种接口，以便应用程序能够用各种高级程序语言（如C语言、JAVA语言）写出各种应用程序，实现该高级语言描述的相应功能（用通俗的话来说，就是在操作系统安装上有专门的库或者软件如：C库、JAVA虚拟机等之后，便可以基于这些库，写出各种程序语言的应用程序）。
当然，有些东西太过于简单了，根本没有操作系统，严格用这三层来描述那个东西，有些多余了。比如：你的电视遥控器，本来遥控器就是一个按钮，里面有一个集成电路，复杂点的至多上面有一个液晶的显示屏显示你当前的状态。你可以把它划分为这三个层次来理解。但是我们的思维不是那么僵硬的，我们可以跨越这三个层次，不用不必什么都非得加上这三层的界限。

*软件
另外还有一个软件，其实软件的概念比较笼统，把它放在前面的三层中，在哪一层都有软件的影子（当然，在系统层和应用层，软件体现的比较明显，在应用层体现的尤其明显）。不像硬件那么明确。软件其实按照你的理解可以把它理解成程序。程序可以是C语言写的，可以是JAVA写的，可以是汇编语言写的，可以是机器语言写的。但是不仅如此，其实软件存在与各种地方，不光光是通过程序语言写出来的，比如它可以是电脑BIOS中固化进去的东西，可以是硬件电路板上按照一定门电路逻辑焊接起来构成的特定功能的板子（例如遥控器里面直接就是电路焊接成那样的，直接就有控制的功能，这就是固化的程序，不是编码写的而是电路焊接组成的功能），甚至不用电路，你用几个木条弄成多股勒米牌，按照特定的图案倒下去，其实这也是一种软件。所以软件就是按照一定的方式组合起来，你看不到，但是却能在整体上让硬件（例如米牌）呈现出特殊效果的功能的东西。

*关系
其实到这里，我们需要意识到一下几个方面：
第一个是，“操作系统为应用程序提供了运行的环境”，前面已经说过。
第二个是，“应用程序为我们这些用户提供了可以选择的功能”。只有手机上安装了特殊的应用程序，我们才能打开这个应用程序，使用其中的功能。后面在讲到应用层的时候，就不重复这个了。
第三个是，“硬件为操作系统提供了展示的舞台”，其实这个也不能理解，只有有了实际的硬件（比如手机），才能在其上加载或者烧写或者安装上操作系统。
问题是，究竟我们是怎样经过这三个层次，最后达到使用相应功能的目的呢？
再举一个直观的例子，如亮红灯的功能。假设我们手机上有一个手电筒应用程序，其上的“亮红灯”按钮，就可以实现亮红灯的功能。实际情况是这样的，经过硬件层（红灯）->系统层（手机开机之后的系统加载）->应用层（系统加载完毕之后桌面上的手电筒），打开手电筒应用后，最终呈现在我们面前的是应用程序的直观界面。而我们直接就可以通过按下应用程序的“亮红灯”按钮，发出指令，然后这个指令经过应用层（手电筒的“亮红灯”按钮）->系统层（操作系统将“亮红灯”的功能进行翻译，发送指令给硬件）->硬件层（接收到指令，找到红灯的线路点亮红灯），来传达我们的意图，硬件层最终完成功能。
应用层：

*产品
至今为止，我们说了三个层次，但是这三个层次是对谁而言？回到开头，只能看到“东西”两个字，其实为清晰起见，虽然不是官方说法，但是我们可以这样理解，以上我们所说，都是针对产品而言的，也就是说，我们这个行业，我们开发一个产品，主要是在以上三个层次而言的。
比如：手机产品、电子书产品、平板电脑产品、摄像机产品、电视产品等等，都是我们可以生存的领域所创造的东西。

*学习的资料，如果你想学，可以看看我的博客。
quietheart.cublog.cn
大致有以下的内容， 不要直接在主页上点开，要用“博文目录”的方式来查看列表。
*C语言方面（分类：学习相关->C&C++）：http://blog.chinaunix.net/uid/9525959/sid-30573-abstract-1.html

*Linux安装方面（分类：学习相关->Linux安装）：http://blog.chinaunix.net/uid/9525959/sid-30585-abstract-1.html

*Linux使用方面（分类：学习相关->Linux命令）：http://blog.chinaunix.net/uid/9525959/sid-30584-abstract-1.html

*常用工具：
Linux下编程（分类：学习相关->实用工具）：http://blog.chinaunix.net/uid/9525959/sid-30610-list-1.html

有一本书，应该看看：《林锐软件开发思想》，你自己找，我给你发了你就不珍惜了。
其他：
程序设计语言方面，网络方面，数据库方面，系统方面，设计方面。