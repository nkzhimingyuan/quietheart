repo

Android 使用 Git 作为代码管理工具，开发了 Gerrit 进行代码审核以便更好的对代码进行集中式管理，还开发了 Repo 命令行工具，对 Git 部分命令封装，将百多个 Git 库有效的进行组织。 Android 是由 kernel、Dalvik、Bionic、prebuilt、build 等多个 Git 项目组成，所以 Android 项目编写了一个名为 Repo 的 Python 的脚本来统一管理这些项目的仓库，使得 Git 的使用更加简单。

使用repo前先下载repo脚本。
有时可以在repo中的子目录中，运行repo命令，命令参数可以是相对路径。不一定非得到.repo的父目录下，使用manifest中清单指定的名字（比如"repo start test ../project1"）。


repo常用命令：

repo init –u URL [OPTIONS]
其中，
-u:指定一个URL，其连接到一个manifest仓库
-m:在manifest仓库中选择一个xml文件
-b:选择一个maniest清单库的一个特殊的分支
repo init可以被执行多次，如果没有参数，则从上游获取新的清单库文件；
如果使用-u会重新设定上游清单库地址并重新同步；
如果使用-b则使用清单库的不同分支以便在使用repo sync时将项目同步到不同的里程碑。

另外，
这里的repo, 开始可能只是一个简单的叫repo的shell脚本. 这其实只是个皮，真正的repo是python的脚本, 要用repo init来下载.用repo init来获取真正的repo(python写成的)的git仓库, 以及Android源码的列表信息 (manifest)的git仓库.
获取的repo库地址在引导脚本中的REPO_URL和REPO_REV变量指出，如果覆盖默认设置从指定源克隆repo库，那么使用如下选项选择指定的repo库：
--repo-url:设定repo版本库地址；
--repo-branch:设定要检出的分支。
其实repo命令的子命令，都对应其repo库中目录subcmds下的一个python脚本，使用repo help <cmd>获取帮助信息。repo init主要就是检出manifest清单库，其实也可用git操作完成。除非是没跟踪的状态，否则repo init不会使得对manifests的修改丢失。

命令repo init 主要完成如下操作：
*完成repo工具的完整下载，执行的repo脚本只是使用repo库之前的引导程序。
初始化之时它会将repo.git库克隆到当前.repo/repo目录下，之后将控制权转给其中的repo/main.py继续完成初始化工作，这里.repo/repo/repo为新的repo初始化脚本。
*克隆清单库manifest.git (地址来自于-u参数)到.repo/manifest.git中，本地清单内容在.repo/manifests中。
repo/manifest.xml只是符号链接，它指向相应选择的清单，默认是.repo/manifests/default.xml;如果manifests中有多个xml文件，repo init 可以通过-m任意选择其中一个，默认选择是default.xml;
*询问用户的姓名邮件地址，如果与默认的不同则存于.repo/manifest.git/config中。
*如果repo init还带有--mirror参数，则会建立与上游一模一样的镜像。
--mirror命令只能在第一次初始化的时候使用，使用这个选项之后，也会在克隆的.repo/manifests.git/config记录上如下信息：
[repo]
	mirror=true

综上，进行repo init之后，我们会得到一个.repo目录，目录中的内容大致如下：
*.repo/repo: 完成repo工具库，repo引导程序下载完这个repo工具库后，将后续的初始化工作交由到这里。
*.repo/manifests.git: repo清单文件库，可以包含多个清单文件和多个分支，每个清单文件和分支都有对应的版本，清单文件以xml格式组织，描述该项目所包含子项目git库。
*.repo/manifests: 当前使用的清单库中的工作分支，其中的xml文件就描述上述所说的项目所包含的所有子项目git库。
大致如下：
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <remote  name="origin"
           fetch="ssh://gerrit"
           push="ssh://gerrit"
           review="http://xxxx.com:8080"  />
  <default revision="refs/for/branch1"
           remote="origin"
           sync-j="4" /> 
  <project groups="pdk-cw-fs" name="device/common"  />
  <project groups="pdk" name="device/generic/arm64"  />
.......
  <project groups="pdk" name="platform/build" path="build"  >
    <copyfile dest="Makefile" src="core/root.mk" />
  </project>
......
</manifest>
其中：
remote元素，定义了名为origin的远程版本库，其库的基址为ssh://gerrit.
default元素，设置各个项目默认远程版本库为origin，默认的的分支为refs/for/branch1。当然各个项目(project元素)还可以定义自己的remote和revision覆盖默认的配置.
project元素，用于定义一个项目，path属性表示在工作区克隆的位置，name属性表示该项目的远程版本库的相对路径
project元素的子元素copyfile，定义了项目克隆后的一个附件动作，从src拷贝文件到dest
*.repo/manifest.xml: 一个符号连接，指向.repo/manifests/default.xml，描述当前所处项目的清单文件。
*.repo/projects：repo脚本所管理的所有git项目库。
建立镜像之后，可以通过自己添加manifest文件或者为清单库添加分支，来建立自己的项目集合。

例如：
*下载repo并克隆manifest：
$repo init  -u git://172.16.1.31/manifest.git
这里，做完之后，当前目录便出现一个.repo文件。


*选择指定的文件清单：
$repo  init  -u git://172.16.1.31/manifest.git –m android.xml
这样选择的是android.xml里面的配置，执行之后，.repo/manifest.xml便指向.repo/manifests/android.xml
这里，指定的清单文件是以xml格式组织的，它里面指明了repo将要管理哪些git库。一个清单库可以包含多个清单文件和多个分支，每个清单文件和分支都有对应的版本。
举个例子：
remote元素，定义了名为korg的远程版本库，其库的基址为git：//172.16.1.31/；
default元素，设置各个项目默认远程版本库为korg，默认的的分支为gingerbread-exdroid-stable。当然各个项目(project元素)还可以定义自己的remote和revision覆盖默认的配置；
project元素，用于定义一个项目，path属性表示在工作区克隆的位置，name属性表示该项目的远程版本库的相对路径；
project元素的子元素copyfile，定义了项目克隆后的一个附件动作，从src拷贝文件到dest。

*指定清单库的某个分支：
repo init -u https://android.googlesource.com/platform/manifest -b android-4.0.1_r1
注意这里分支是指manifest库的分支，而不是其清单文件管理的各个git项目的分支。manifest库的不同分支里清单文件内容有所不同，里面可能会指定不同的git项目集合。当然有时也可在同一个分支内用不同的清单文件指定不同的git项目集合。而一个清单文件中，有一个字段设定了默认的分支，这个分支指定了其管理的所有git项目的默认分支。使用repo sync之时，所有项目不在任何分支中，可以用repo start 来为清单文件中的指定项目或者所有项目创建基于这个默认分支的特定分支，具体可参见repo start。


repo sync [<project>…]
用于参照清单文件.repo/manifest.xml克隆并同步版本库。如果某个项目版本库尚不存在，则执行repo sync 命令相当于执行git clone，如果项目版本库已经存在，则相当于执行下面的两条指令：
git remote update
相当于对每一个remote源执行了fetch操作

git rebase origin/branch
针对当前分支的跟踪分支执行rebase操作。不采用merge而是rebase目的是减少提交数量、方便评审。

例如：
*按照清单库对其中所有项目进行同步/克隆：
$repo sync
这相当于对所有remote执行fetch+rebase,而不是像pull那样执行fetch+merge，不用merge而用rebase是因为merge之后历史复杂，而rebase之后历史简单。

*选择清单库中的一个项目进行同步/克隆:
$repo sync platform/build

*多个job同时进行：
$repo sync -j 16
类似make -j。

*只对本地进行更新，不从远端fetch：
$repo sync -l
当前有了.repo，会从本地将项目进行sync，而不从远端进行fetch。如果此时你的工作目录下只有一个之前sync好的.repo目录，这个命令将会重新将代码从.repo检出到工作区。

repo start  <newbranchname> [--all | <project>…]
刚克隆下来的代码是没有分支的,repo start实际是对git checkout –b 命令的封装。 为指定的项目或所有项目（若使用—all参数），以清单文件中为设定的分支，创建特性分支。这条指令与git checkout –b 还是有很大的区别的，git checkout –b 是在当前所在的分支的基础上创建特性分支，而repo start是在清单文件设定分支的基础上创建特性分支(相当于“git checkout -b <newbranchname> <清单文件设定的分支>”)。假设清单文件设定的基础分支是branch1，我们在一个自建分支b2上修改提交，然后用repo start创建一个分支b3，发现将会切换到b3，并且b2上的修改日志没有。即使我们自建的b2分支（通过checkout -b 或repo start方式创建）其名称也是branch1，也有同样的现象。

例如：
*在清单文件设定分支的基础上，为所有被管理的git项目创建stable特定分支：
  repo start  stable  --all
假设清单文件中设定的分支是gingerbread-exdroid-stable，那么执行以上指令就是对所有项目，在gingerbread-exdroid-stable的基础上创建特性分支stable。

*对清单文件中指定的git项目在清单文件设定分支的基础上创建stable特定分支：
  repo start  stable  platform/build platform/bionic
假设清单文件中设定的分支是gingerbread-exdroid-stable，那么执行以上指令就是对platform/build、platform/bionic项目，在gingerbread-exdroid-stable的基础上创建特性分支stable

其实假设清单中设定的默认分支为refs/for/branch1，repo sync之后，当前项目没有处于任何分支，正常工作时可以：
$repo start branch1 <projectname>
这样projectname就创建并切换到branch1分支，和默认分支名一样了。
当然也可以在projectname目录下用：
$git checkout -b branch1 <origin/refs/for/branch1>
然后类似如下修改，commit,push等等就可以进行了，gerritreview通过就可以了，当然不一定非得在branch1上提交：
$vim ...
$git add .
$git commit -m 'xxx'
$git push origin/project HEAD:refs/for/branch1
但是如果简单的使用:$git checkout -b branch1这样的命令，那么得到的分支就是以当前的分支为基准，而不是以远端的branch1（或repo的默认分支）为基准的了。


repo branches [<project>...]
通过读取.git/refs目录下的引用，来获取各个项目的分支列表并汇总显示。
输出类似：
*P nocolor | in repo 
   repo2 | 
对于其输出，
第一个字段显示分支的状态：是否当前分支，分支是否发布到代码审核服务器上？
第一个字母若显示星号（*），含义是此分支为当前分支
第二个字母若为大写字母P，则含义是分支的所有提交都发布到代码审核服务器上了。
第二个字母若为小写字母p，则含义是只有部分提交被发布到代码审核服务器上。
若不显示P或p，则表明分支尚未发布。
第二个字段为分支名。
第三个字段为以竖线（|）开始的字符串，表示该分支存在于哪些项目中。可能如下：
  in all projects 
该分支处于所有项目中。
  in project1 project2 
该分支只在特定项目中定义。如：project1、project2。
  not in project1 
该分支不存在于这些项目中。即除了project1 项目外，其他项目都包含此分支。

例如：
*查看当前repo库所有项目分支情况：
repo branches
*  branchr1 | not in:
                                   project1
                                   project2
   master                    | in project3, project4


repo status [<project>...]
repo status 子命令实际上是对  git diff-index、git diff-files  命令的封装，同时显
示暂存区的状态和本地文件修改的状态。
输出类似：
project repo/ branch devwork 
-m subcmds/status.py 
... 
上面的示例输出显示了repo 项目的devwork 分支的修改状态。
 每个小节的首行显示项目的名称，以及所在分支的名称。
 之后显示该项目中文件的变更状态。头两个字母显示变更状态，后面显示文件名或其他变
更信息。
 第一个字母表示暂存区的文件修改状态。其实是  git-diff-index  命令输出中的状态标识，用大写显示（即index和repository的比较）。
  -：没有改变
  A：添加（不在HEAD中，在暂存区）
  M：修改（在HEAD中，在暂存区，内容不同）
  D：删除（在HEAD中，不在暂存区）
  R：重命名（不在HEAD中，在暂存区，路径修改）
  C：拷贝（不在HEAD中，在暂存区，从其他文件拷贝）
  T：文件状态改变（在HEAD中，在暂存区，内容相同）
  U：未合并，需要冲突解决
 第二个字母表示工作区文件的更改状态。其实是  git-diff-files  命令输出中的状态标识，用小写显示。（即工作区和index的比较）
  -：新/未知（不在暂存区，在工作区）
  m：修改（在暂存区，在工作区，被修改）
  d：删除（在暂存区，不在工作区）
 两个表示状态的字母后面，显示文件名信息。如果有文件重命名还会显示改变前后的文件
名及文件的相似度。



repo forall [<project>…] –c <command>
迭代器，可以在所有指定的项目中执行同一个shell指令
 Options：
-c:后面所带的参数着是shell指令
-p:在shell指令输出之前列出项目名称
-v:列出执行shell指令输出的错误信息
 其它环境变量：
REPO_PROJECT:指定项目的名称
REPO_PATH:指定项目在工作区的相对路径
REPO_REMOTE:指定项目远程仓库的名称
REPO_LREV:指定项目最后一次提交服务器仓库对应的哈希值
REPO_RREV:指定项目在克隆时的指定分支，manifest里的revision属性
 另外，如果-c后面所带的shell指令中有上述环境变量，则需要用单引号把shell指令括起来。

*显示所有项目在工作区的相对路径：
$repo forall -c 'echo $REPO_PATH'

*给所有项目大标签：
$repo forall –c git tag crane-stable-1.6

*引用项目环境变量添加远程库：
$repo forall -c 'git remote add korg ssh://xiong@172.16.31/$REPO_PROJECT.git'

*对所有git项目内容进行reset：
$repo forall -c 'git reset --hard HEAD'

*对所有git项目打成一个tag：
$repo forall -c 'git tag v1.1'
这在开发repo项目时，对一个特定发布版本进行tag时使用。

*对于该repo项目，取出之前打上tag的版本：
$repo forall -c 'git checkout v1.1'

=============待整理
repo checkout <branch name> [<project>...]
是对git checkout的封装，用于检出之前由repo start创建的分支。


repo manifest
显示manifest文件的内容   

repo info [-dl] [-o [-b]] [<project>...]
获取清单分支，当前分支，和未合并分支的信息。

例如：
*获取当前项目的信息：
$repo info
输出类似：
Manifest merge branch: tpvision/2k15_mtk_andL_fb4
Manifest groups: all,-notdefault
----------------------------
Project: device/tpvision/tvsoc/tvsoc_mtk
Mount path: /home/miracle.lv/androidLRepo/mtk-5593_p4/device/tpvision/tvsoc/tvsoc_mtk
Current revision: tpvision/2k15_mtk_andL_fb4
Local Branches: 1 [2k15_mtk_andL_fb4]
----------------------------


repo help
获取帮助信息


repo upload [--re --cc] {[<project>]... | --replace <project>} 
这个命令类似git中的push，将你的修改推送至gerrit中。
参数： 
-h, --help  显示帮助信息。 
-t  发送本地分支名称到 Gerrit 代码审核服务器。 
--replace  发送此分支的更新补丁集。注意使用该参数，只能指定一个项
目。 
--re=REVIEWERS, --reviewers=REVIEWERS 
要求由指定的人员进行审核。 
--cc=CC  同时发送通知到如下邮件地址。
通过repo upload 命令在代码审查服务器上提交了一个修订集，会得到一个修订号。 关于此次修订的相关讨论会发送到提交者的邮箱中。如果修订集有误没有通过审核，可以重
新修改代码，再次向代码审核服务器上传修订集。
一个修订集修改后再次上传，如果修订集的ID 不变是非常有用的，因为这样相关的修订集
都在代码审核服务器的同一个界面中显示。
在执行  repo upload  时会弹出一个编辑界面，提示在方括号中输入修订集编号，否则会在
代码审查服务器上创建新的ID。有一个办法可以不用手工输入修订集，如下：
repo upload --replace project_name 
当使用  --replace  参数后，repo 会检查本地版本库名为
refs/published/branch_name  的特殊引用（上一次提交的修订），获得其对应的提交SHA1
哈希值。然后在代码审核服务器的 refs/changes/  命名空间下的特殊引用中寻找和提交SHA1
哈希值匹配的引用，找到的匹配引用其名称中就所包含有变更集ID，直接用此变更集ID作为新的
变更集ID提交到代码审核服务器。

举例：
假设修改好当前目录项目的内容之后进行：
$git add .
$git commit -m 'xxx.'
下一步将上传至gerrit进行review：
$git repo upload .
这样的效果和git push HEAD:refs/for/xxx一样。使用git push的方式比较直接，能够直接指定相应的push参数，repo upload会将其参数也封装。具体要推送的远端分支，在gerrit上一般是：refs/for/xxx，这里xxx就是manifest.xml中指定的默认分支名称。
假设review出错，需要改正，改正之后再：
$git add .
$git commit --amend
$repo upload --replace
注意，有些upload命令没有--replace选项了，提交之后也一般都在原来的change id上面。






repo prune [<project>...]
repo prune  子命令实际上是对  git branch -d  命令的封装，该命令用于扫描项目的各
个分支，并删除已经合并的分支。

 repo status
repo checkout
repo branches
repo diff
repo stage
repo upload

repo forall
repo prune

repo工作流：


repo常用工作流程：
(1)gitserver->local:
$repo init
$repo sync
从git服务器下载最新代码将本地工作目录更新。

(2)local working
$repo start xxx
$vim xxx
$git add xxx
$git status xxx
$git commit xxx
$repo status xxx
以上为本地开发工作大致的过程。

(3)local->review server
$repo upload xxx
通过上述命令，将代码上传至reviewer（一般是gerrit）服务器，功能类似git push。

(3.1)review pass
如果review通过，那么进行第（4）步。

(3.2)review reject
$vim xxx
$git add xxx
$git commit --amend xxx
$repo upload --replace
如果review失败，那么进行前面几步之后，再进入(3.1)或(3.2)的执行过程。

(4)reviewer->git server
review通过之后，reviewer会将提交的change set合并到git服务器。
我们可以继续在本分支上，进行（2）之后的过程，继续开发。

或者如果完成本分支开发，可以运行如下，删除当前分支：
$repo rune xxx




*本地镜像:

mkdir <somepath>/android_mirror

cd <somepath>/android_mirror

repo init -u https://android.googlesource.com/mirror/manifest --mirror

repo sync

*将本地镜像作为仓库服务器使用:

mkdir <somepath2>/myandroid

cd <somepath2>/myandroid

repo init -u /usr/local/aosp/mirror/platform/manifest.git

repo sync

repo  init 

*下载代码：

$repo sync

也可以选择克隆其中的一个项目:

$repo sync platform/build

这里，语法格式是：repo sync [<project>…]

用repo sync来获取真正的Android代码。它会参照清单文件.repo/manifest.xml克隆并同步版本库。如果某个项目版本库尚不存在，则执行repo sync 命令相当于执行git clone，如果项目版本库已经存在，则相当于执行下面的两条指令：

$git remote update

相当于对每一个remote源执行了fetch操作

$git rebase origin/branch

针对当前分支的跟踪分支执行rebase操作。

用repo sync 在抓去 android source code 的时候，会经常出现一些错误导致 repo sync 中断，每次都要手动开始。 可以用如下的命令，来自动重复 $?=1;  while [ $? -ne 0 ]   do  repo sync   done


用repo sync 在抓 android source code 的时候，会经常出现一些错误导致 repo sync 中断，每次都要手动开始。 可以用如下的命令，来自动重复

 $?=1;   

while [ $? -ne 0 ]   

do  repo sync   

done


*查看repo实际运行时获取的清单：

repo manifest -o -




其它：

?什么是repo的分支？
清单文件中指定分支吗？

fyou’re not in China, please follow with the steps as below

       mkdir ~/bin

      PATH=~/bin:$PATH

      curl https://storage.googleapis.com/git-repo-downloads/repo >~/bin/repo

      chmod a+x ~/bin/repo

      mkdirphilips_eu_jb_repo(this is your working folder)

      cdphilips_eu_jb_repo

      repo init-u ssh://url/philips_eu_jb_repo

8.     repo sync





参考资料：

http://blog.csdn.net/skyflying2012/article/details/23742683

http://blog.chinaunix.net/uid-103601-id-2961410.html

http://wv1124.iteye.com/blog/1838217

http://blog.163.com/chaoyongan@126/blog/static/31068420201339101239726/

http://www.mikewootc.com/wiki/android/basic/repo_usage.html

http://blog.sina.com.cn/s/blog_89f592f50100vpau.html



一次repo实践：

1、拷贝repo脚本程序

(不同的repo库使用的repo脚本不同？)

2、生成ssh到公钥和私钥

$ssh-keygen -t rsa -C <email>

这里，全部询问直接回车，生成的ssh-key 在~/.ssh/id_rsa和~/.ssh/id_rsa.pub

3、配置ssh

#vim ~/.ssh/config

添加类似如下内容

Host gerrit

Hostname 172.16.112.68

port 29418

User miracle.lv

IdentityFile ~/.ssh/id_rsa



Host gerrit-master

Hostname 172.27.221.226

port 29418

User miracle.lv

IdentityFile ~/.ssh/id_rsa

4、登录gerrit并向gerrit中添加ssh的公钥。

5、测试gerrit的ssh连接成功：

#ssh gerrit

会有相应欢迎信息。

6、初始化repo库

#mkdir mydir

#cd mydir

这两条命令创建工作目录。

#repo init -u ssh://gerrit/xxx -b <branch name>

#repo sync

这两条下载代码，其中 init命令指定下载路径和分支，repo sync真正下载代码。

其实repo init之后，目录中会多出一个.repo目录，其结构如下：

../

.repo/

| manifests.git/

| | branches/

| | hooks/

| | info/

| | logs/

| | objects/

| | refs/

| | rr-cache/

| | .repopickle_config

| | FETCH_HEAD

| | HEAD

| | config

| | description

| manifests/

| | .git/

| | default_mtk_1431_4.xml*

| | default_mtk_1434_1.xml*

| | default.xml                                                                                                                                

| | default_clone.xml

| | default_tpvision.xml

| repo/

| manifest.xml@

其中的.repo/repo/repo文件就是最新的repo程序。

用repo init来获取真正的repo(python写成的)的git仓库, 以及Android源码的列表信息(manifest)的git仓库. 这些会放在当前路径下一个.repo文件夹里.

用repo sync来获取真正的Android代码.

