举例
待整理
问题

举例
===========
3、文件
-------
*在一个新的标签页下面打开一个文件：
输入":tabe file".
这样会新开一个标签，打开file文件。

*在新的标签下面打开当前光标下文件名：
输入"[Ctrl]wgf".
这样会新开一个标签，打开当前光标下的文件。


4、编辑
-------

5、定位
-------
*整体连同光标向上滚动一行：
输入"[Ctrl]e".
这和用'j'向下滚动不太一样，前者只有光标动，后者是是屏幕也跟着光标滚动，类似'zt'.

*整体连同光标向下滚动一行：
输入"[Ctrl]y".

6、编程
-------

7、显示
-------

8、配置
-------
*查看配置选项：
输入":set".
这样会显示当前所有配置的信息。

*查看某一个配置的值：
输入":set <配置名称>?"

*将tab变成空格
输入"set expandtab".

*取消将tab变成空格
输入"set noexpandtab".

*设置当前目录自动跟随当前文件:
输入":set autochdir".
或输入":set acd".


*、
-------
*在命令行上面显示输入的命令：
输入：":set showcmd".

*新开一个标签并执行"cw"命令:
输入":tabnew +cw".

*跳转到一个包含 "block" 的标签:
输入":tag /block".
输入之后，再利用命令行补全功能：输入 <Tab>。Vim 会找到所有包含 "block" 的标签并使用第一个匹配。

*在当前目录多个文件中搜索一个字符串非递归（假设为main）：
输入":vimgrep main *.cpp".
或输入":vim main *.cpp".
活输入":vim /main/ *.cpp".
或输入":vim /main/*.cpp".
或输入":vim /\<main\>/*.cpp".
这样会在当前目录中所有的*.cpp文件中搜索main字符串，并且定位到第一个匹配的地方。注意这里命令最好能有空格便不要省略，这里当前目录和文件系统的当前目录不一样，需要在vim中使用":pwd"来查看。如果想要查看其他的匹配，需要执行quickfix交互命令，例如":cw",":cnext",":cc"等等。这里的匹配数目具有匹配的行的数目，即每行只计数一次，即使一行有多个匹配,如果想要匹配数目是精确的则在/main/后面加上一个g,具体参见":help vimgrep"。

*报告一个单词匹配的次数：
输入":%s/<查找的单词>//gn".

*仅搜索第N个匹配的然后就退出：
输入"Nvimgrep /main/ ../examples/**/*.cpp".
这里，'N'是一个数字，一般我们进需要快速确认是否有匹配的时候，那么N设置为1,这样可以快速返回。

*在当前目录多个文件中递归搜索一个字符串：
输入":vimgrep main **/*.cpp".
或输入":vimgrep /main/**/*.cpp".
这样，会递归地在当前目录的所有*.cpp文件中寻找main字符串。 

*搜索字符串忽略大小写：
输入":vimgrep /main\c/ *.cpp".
这里使用'\c'忽略大小写,默认不忽略。

*vim中输入'/'之后，再[Ctrl]f，会出现以前搜索的历史窗口。

*vim中进入插入状态之后，输入[Ctrl]a，会自动输入上次插入状态输入的内容。

*在vi文件管理器中，输入v可以分割一个垂直的窗口，并打开一个文件。

*设置tags文件：
输入":set tags=./tags".
这里，将搜索查询用到的tags文件设置为当前文件所在目录的tags文件。而不是vim运行的当前目录。

*设置taglist中显示当前光标所在函数时间为2秒延迟：
输入":set updatetime=2000"
这里，输入":set updatetime"显示当前值。

*移动到当前代码块开头：
输入"[{".

*移动到当前代码块结束：
输入"]}".

*移动到当前"()"层次的开始：
输入"[(".
这样将在"()"里面实现跳转，当然可以跨越行了。

*移动到当前"()"层次的结束：
输入"])".
这样将在"()"里面实现跳转，当然可以跨越行了。

*移动到注释的开头：
输入"[/".
这里仅对/**/注释有效。

*移动到注释的结尾：
输入"]/".
这里仅对/**/注释有效。

*显示所有匹配当前光标下的标号以及位置:
输入"[I".
这里，如果包含的(包括间接包含的)头文件中有，那么也会显示相应头文件中的定义。

*跳转到"[I"列出的第N个匹配：
输入"N[[TAB]".
这里，[TAB]等价于[Ctrl]i.

*列出第一个匹配当前光标的标号以及位置：
输入"[i".
这里，如果包含的(包括间接包含的)头文件中有，那么也会显示相应头文件中的定义。

*列出当前光标后面所有匹配光标的标号的位置：
输入"]I".

*跳转到"]I"列出的第N个匹配：
输入"N][TAB]".
这里，[TAB]等价于[Ctrl]i.

*列出当前光标后面匹配光标的标号的第一个位置：
输入"]i".

*列出当前光标下标号的所有宏定义位置：
输入"[D".
这里，"[I"列出的是所有标号，而"[D"列出的是所有匹配的宏定义处（都包含#define字样）.

*列出当前光标下标号的宏定义第一个位置：
输入"[d".
这里，"[i"列出的是所有标号中第一个，而"[d"列出的是所有匹配的宏定义（都包含#define字样）第一个.


*跳转到上一个第一列为"{"的位置：
输入"[[".
这样会向上，跳到上一个第一列为"{"的位置。

*跳转到上一个第一列为"}"的位置：
输入"[]".
这样会向上，跳转到上一个第一列为"}"的位置。

*跳转到下一个第一列为"{"的位置：
输入"]]".
这样会向下，跳转到下一个第一列为"{"的位置。

*跳转到下一个第一列为"}"的位置：
输入"][".
这样会向下，跳转到下一个第一列为"}"的位置。

待整理：
===========
*打开多个文件并且每个文件占用一个标签：
#vim -p file1 file2

*全文缩进：
输入"gg=G"。
实际，输入"="之后，再输入某个地方，就是当前位置到目标位置之间的行缩紧。输入"=="表示当前行缩进。

*设置vim打开文件不会自动创建备份文件：
输入":set nobackup".

*使用tags跳转列出所有匹配：
输入：":ts".
如果在第一个tags中找到了，那么就不会在下一个tags里面找。例如：
:set tags=./tags,tags,/home/user/commontags
首先搜索当前文件所在目录的tags，然后搜索vi的当前目录（pwd）的tags，然后commontags。

查看当前tags堆栈：
输入":tags".
输出类似如下：
   # TO tag      FROM line in file/line
   1  1 main             1  harddisk2:text/vim/test
 > 2  2 FuncA           58  i = FuncA(10);
   3  1 FuncC          357  harddisk2:text/vim/src/amiga.c
这里,
>指定的是???
TO下面的是哪个匹配的tag，例如FuncA有两个匹配，我选择了第2个，那么对应的TO下面就是2。
in file/line下面指明在跳转到相应的tag之前是在那个位置（即从哪个位置跳过来的）。

其他的参见：/mnt/my***/vim补充

自己定义的vi快捷按键：
弹出预览：
:map [j <C-w>}

关闭预览：
:map [k <C-w>z

切换窗口：
:map [n <C-w>w

最大化水平：
:map [l <C-w>_

tag：
:map ]j <C-]>
弹出：
:map ]k <C-t>

查看头文件预览：
:map [h ?????
第一个匹配的：
:map ]h <C-]>1
:map [h <C-w>}1

*定位到光标下文件的指定行：
输入"gF".
这里，和gf类似，不过精确定位到了指定行。文件形式必须是：
eval.c:10 ~
eval.c @ 20 ~
eval.c (30) ~
eval.c 40 ~
这样的形式，这样，就会定位到文件的":"等分隔符号的行那里了。

*对超长行设置自动换行：
输入":set wrap".

**netrw文件浏览常用操作
*切换vim工作目录为当前目录：
输入":c".
这里，处于netrw所浏览的目录中，而不是打开的文件中。

*创建文件：
输入":%".

*创建目录：
输入":d".

*删除目录／文件：
输入":D".

*查看最近访问的目录：
输入":u".
这里，类似浏览器的back后退，相反方向的操作是":U"。

*进入当前打开文件所在的目录：
输入":Explore".
或输入":E".

*在当前工作目录得到指定格式的文件：
输入："Explore */filepat".
这里，filepat就是特定的文件类型，例如"*.c"。

*在当前工作目录以及子目录中得到指定格式的文件：
输入:"Explore **/filepat".
这里，filepat就是特定的文件类型，例如"*.c"。

*在当前工作目录得到包含指定格式字符串的文件：
输入:"Explore *//pattern".
这里，pattern就是要搜索的字符串(使用了vimgrep)。

*在当前工作目录以及子目录得到包含指定格式字符串的文件：
输入:"Explore **//pattern".
这里，pattern就是要搜索的字符串(使用了vimgrep)。

如何列出所有匹配？

**

问题
===========
如何用变量表示特殊按键？
如何用变量表示当前光标词？
如何搜索当前文件所在目录?
如何在tags的多个搜索结果中搜索指定的字符串?
有时候vim用tag的时候自动跳转到了第一个，如何设置不让自动跳转而是自己选？
vim只读方式打开一个文件?
vim启动的时候如何执行特定的命令的选项？
vim搜索ascii码？
如何全局替换？

如何切换编码的转换。
假设文件是日文的编码，编码类型为sjis，而当前系统环境设置为utf8，那么我要使用vim打开这个日文编码的文件需要首先将它转成utf8的，一个可选的方法就是使用iconf工具，将文件转换，但是如果我想要直接在vim中显示出来而不是转换的化那么如下：
1）:set termencoding=utf8
2):set encoding=sjis
意思是，一般来说默认的termencoding为空，使用termencoding做为中转，而文件编码vim显示设置encoding为sjis。原因是vim开始启动的时候语言环境默认为系统的，如果只设置了encoding那么只是将编码设置对了，但是键盘和显示的转换还是不对的，所以需要设置这个termencoding。设置之后，一下子不会转换成功，将文件切换出去在切换回来，这样显示就正常了。参见help encoding.
保存的时候会影响么？

cscope或者ctags出现多个匹配的时候如何设置停留或者不自动停留?
如何全局搜索？需要具体了解。
set paste

关于tags文件：
:help tags
tags选项指定了一系列的文件列表（tags文件），借助这些文件搜索一个指定的tag。可以通过向这个tags选项指定特定的tags文件而不是默认的tags。(我们可以通过运行:set tags来查看当前tags选项的设置)
当在多个tags文件中搜索指定tag的时候，会一个一个地在tags文件中进行搜索，当出现如下情况的时候就不会在下个tags文件中进行搜索了：
-当前buffer匹配的static tag（应该就是c中的static类型）被找到了。
-一个global tag被找到。
如果ignorecase选项off，那么匹配的方式是找到一个大小写匹配的就不再搜索下个文件，如果没有那么就使用第一个匹配的tag（无论大小写）；如果设为on那么只要找到一个匹配的（无论大小写）就不再搜索下一个文件了。
当一个tag文件名以"./"开始的时候，那么"."被替换成当前的文件的路径（不是当前vim的工作路径），这样我们可以使用当前打开的文件的目录下面的tags。如果我们优先在当前文件所在目录中的tags进行搜索，那么设置成类似：":set tags=./tags,tags"；如果我们先从vim工作路径的tags进行搜索，没有再从当前文件tags文件进行搜索，那么设置成类似："set tags=tags,./tags".
多个tags文件以逗号分割，可以为绝对路径。
例如如下：
:set tags=./tags,tags,/home/user/commontags
这个设置表示，优先搜索当前文件的tags，没有匹配则搜索当前工作路径tags，没有匹配则搜索/home/user/commontags.
如果为'cpoptions'包含d选项那么将和vi兼容，./tags将代表当前目录而不是当前文件目录的tags.
如果'tagrelative'选项设置成on(默认一般如此),而且tags在其他的目录，那么搜索的时候tag中的文件就是相对于那个tag路径的文件。

*将vim选中的文字复制到X剪切板中：
"你在V模式下,选中文字后[Ctrl][Shift]c 复制".


========
以下参考：
跳 转 到 匹 配

"[I" 产生一个每项只有一行文本的列表。如果你想要进一步的查看第一项，你可以这个
命令来跳转：

        [<Tab>

你也可以使用 "[ CTRL-I", 因为 CTRL-I 和按 <Tab> 效果一样。

"[I" 产生的列表在每行的开头都有一个序号。如果你要跳转到第一项外的其它项，首先
输入序号：

        3[<Tab>

会跳转到列表中的第三项。记住你可以用 CTRL-O 跳回到原来的地方。


相 关 命 令

        [i              只列出第一项匹配
        ]I              只列出光标下面的项目
        ]i              只列出光标下面的第一项匹配


查 找 宏 定 义 标 识 符

"[I" 命令查找任何标识符。只查找 "#define" 定义的宏，用：

        [D

同样，这会在所有的包含文件中查找。 'define' 选项指定 "[D" 所查找的预定义样式。
你需要改变它值来适用于 C 或 C++ 以外的语言。
   "[D" 相关命令：

        [d              只列出第一项匹配
        ]D              只列出光标下面的项目
        ]d              只列出光标下面的第一项匹配


help ++opt
给一个vim命令添加文件格式，或者解码等相关选项。++opt中opt参见帮助。

help +cmd
什么是ex命令？
+cmd的cmd可以是任何Ex命令，用来为一个新的打开的文件执行cmd命令，例如：
*打开文件file，并执行":3"命令：
输入":n +3 file".

*打开文件file，并执行"/test"搜索：
输入":n +/test file"


help args
*查看当前文件参数列表：
输入":args".
会打印当前的文件参数，并且当前文件用'[]'括起来。

*新定义文件参数列表：
输入":args **/*.py"
会将当前目录下所有*.py文件作为参数列表，重新定义args参数列表（这里**/*.py表示递归当前目录所有*.py文件）。

*依次对args中的文件执行特定操作：
输入":argdo /test"。
这样，会对所有args中列出的文件依次搜索'/test'。

*替换所有args文件中的指定字符串：
输入：":argdo %s/word/NEW/gc | update"

设置python:前提要有python.vim在syntax下。
au BufNewFile,BufRead *.py,*.pyw setf python


正则表达匹配：
例1：
将:
    SecurityModeElement =   'setSecurityMode'
    PasswordElement =       'setPassword'
    SecurityWEPElement =    'setSecurityWEP'
    SecurityWEPGenElement = 'setSecurityWEPGen'
    SecurityWEPKeyElement = 'setSecurityWEPKey'
    AlgorighmElement =      'setSecurityAlgorithms'
    SubmitElement =         'submit'
变成:
    SecurityModeElement   = 'setSecurityMode'
    PasswordElement       = 'setPassword'
    SecurityWEPElement    = 'setSecurityWEP'
    SecurityWEPGenElement = 'setSecurityWEPGen'
    SecurityWEPKeyElement = 'setSecurityWEPKey'
    AlgorighmElement      = 'setSecurityAlgorithms'
    SubmitElement         = 'submit'
其实就是将=左右的空格交换，用正则表达式替换，如下：
:s/\(\s*\)=\(\s*\)\(\S\)/\2=\1\3/gc
这里，具体参见":help regex"。




*替换第33行内容为第22行内容：
22gg
yy
33gg
V
p


*如何在vim中删除空行
:g/^$/d

寄存器大小写引用的都是一样的，但是在复制的时候，大写的字母的表示追加，小写表示替换。所以："ayy和"Ayy是不一样的，但是"ap和"aP是一样的。

normal模式下输入"!!"之后，可输入shell命令并将其输出写入当前位置。

全局替换
:args **/*.*
将当前目录下所有文件递归加入文件操作列表
:argdo %s/oldword/newword/egc | update
将所有文件操作列表（由args事先设定）执行argdo之后的命令（即替换字符串），并且切换至下一个文件时自动保存。



二进制打开文件：
vim -b 二进制文件

vim十六进制打开文件：
先以二进制打开文件，再在命令模式键入：
:%!xxd
转换为十六进制显示

